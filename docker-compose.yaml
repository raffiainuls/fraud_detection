services:
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - ./postgres-db-volume:/var/lib/postgresql/data
    ports:
      - 5433:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 60s
      retries: 5
      start_period: 5s
    restart: always
    command:
      - postgres
      - -c
      - wal_level=logical
  connect:
    image: confluentinc/cp-kafka-connect:latest
    container_name: connect
    # depends_on:
    #   broker:
    #     condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "host.docker.internal:9093"
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: connect
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      # CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter 
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-6.0.1.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components,/usr/share/java/new-connector
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR
    volumes:
      - ./lib:/usr/share/java/new-connector
    #   - ./connector-confluent-hub:/usr/share/confluent-hub-components
    command:
      - bash
      - -c
      - >+
        echo "Installing Connector"

        confluent-hub install --no-prompt debezium/debezium-connector-mysql:1.7.1

        confluent-hub install --no-prompt debezium/debezium-connector-postgresql:2.4.2

        confluent-hub install --no-prompt confluentinc/kafka-connect-jdbc:10.7.6

        confluent-hub install --no-prompt confluentinc/kafka-connect-oracle-cdc:latest

        # Install ClickHouse Kafka Connect sink
        confluent-hub install --no-prompt clickhouse/kafka-connect-clickhouse:1.0.5

        #

        echo "Launching Kafka Connect worker"

        /etc/confluent/docker/run &

        #

        sleep infinity
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:8083/connectors"]
        interval: 10s
        timeout: 5s
        retries: 5

  control-center:
    hostname: control-center
    image: confluentinc/cp-enterprise-control-center:latest
    container_name: control-center
    depends_on:
      # broker:
      #   condition: service_healthy
      connect:
        condition: service_healthy
    ports:
      - 9021:9021
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "host.docker.internal:9093"
      CONTROL_CENTER_ZOOKEEPER_CONNECT: "host.docker.internal:2181"
      # CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
      # CONTROL_CENTER_KSQL_ENABLE: "true"
      # CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      # CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
      # CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
      # CONTROL_CENTER_KSQL_KSQLDB1: "ksqlDB Cluster"
      CONTROL_CENTER_CONNECT_CLUSTER: "http://connect:8083"
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_INTERNAL_TOPICS_REPLICATION: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_REPLICATION: 1
      CONTROL_CENTER_METRICS_TOPIC_REPLICATION: 1
      CONTROL_CENTER_CONNECT_METRICS_TOPIC_REPLICATION: 1
      # CONTROL_CENTER_KSQLDB_TOPIC_REPLICATION: 1
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_STREAMS_CACHE_MAX_BYTES_BUFFERING: 10485760
      CONTROL_CENTER_STREAMS_COMMIT_INTERVAL_MS: 5000
      CONTROL_CENTER_STREAMS_NUM_STREAM_THREADS: 2
      CONTROL_CENTER_STREAMS_CONSUMER_REQUEST_TIMEOUT_MS: 30000

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"      # Port AMQP (untuk producer/consumer)
      - "15672:15672"    # Port UI Web Management
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - ./rabbitmq_data:/var/lib/rabbitmq
  

  flink-jobmanager:
    # image: flink:1.17.1-scala_2.12-java11
    build: .
    hostname: jobmanager
    container_name: jobmanager
    ports:
      - "8000:8081"
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
      # - JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
      # - PATH=/usr/lib/jvm/java-11-openjdk-amd64/bin:$PATH
    command: jobmanager
    volumes:
      - ./flink-job:/opt/flink/job
      # - ./lib:/opt/flink/lib

  flink-taskmanager:
    build: .
    # image: flink:1.17.1-scala_2.12-java11
    hostname: taskmanager
    scale: 7
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
      # - JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
      # - PATH=/usr/lib/jvm/java-11-openjdk-amd64/bin:$PATH
    depends_on:
      - flink-jobmanager
    command: taskmanager
    volumes:
      - ./flink-job:/opt/flink/job
      # - ./lib:/opt/flink/lib
  clickhouse-server:
    image: clickhouse/clickhouse-server:latest
    container_name: clickhouse-server
    environment:
      CLICKHOUSE_USER: default
      CLICKHOUSE_PASSWORD: ""  # kosong = tidak pakai password
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1 
    volumes:
      - clickhouse-data:/var/lib/clickhouse

    ports:
      - '8123:8123'
      - '9000:9000'  # port native ClickHouse client
      - '9009:9009'  # port untuk inter-server communication jika dibutuhkan
    ulimits:
      nofile:
        soft: 262144
        hard: 262144

  clickhouse-client:
    image: clickhouse/clickhouse-client:latest
    container_name: clickhouse-client
    entrypoint:
      - /bin/sleep
    command:
      - infinity
  
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - ./grafana-data:/var/lib/grafana

volumes:
  clickhouse-data:
